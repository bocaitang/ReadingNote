1、什么是IPC

  Inter_Process Communication的缩写 ，进程间通信或者跨进程通信，是指两个进程之间进行数据交换的过程。

2、什么是进程，什么是线程
    线程：线程是CPU调度的最小单元，同时线程是一种有限的系统资源。
    进程：一般指一个执行单元，在PC和移动设备上指一个程序或者一个应用。
    两者关系：一个进程可以包含多个线程，因此进程和线程是包含与被包含的关系。

3、Android系统是如何实现进程间通信的
    对于Android 系统。它是基于Linux内核的一种移动操作系统。通过Binder完成进程间的通信，除了Binder，Android
    还支持Socket，通过Socket完成两个任意终端之间的通信。

4、多进程分为两种方式
   一种情况是一个应用因为某些原因自身需要采取多进程模式来实现。（比如有些模块由于特殊情况需要单独运行在单独的进程中）
   另一种情况是当前应用需要向其他应用获取数据（如果我们通过系统提供的ContentProvider来完成两个应用之间的跨进程通信）

5、可以通过给四大组件指android：process属性，我们可以轻易的开启多进程模式，
    进程名以":"开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一进程，
    而进程名不以":"开头的进程属于全局进程，其他应用通过ShareUID方式可以和它跑在同一个进程中。

    Android系统会为每个应用分配一个唯一的UID,具有相同UID的应用才能共享数据，两个应用通过ShareUID跑在同一个进程中是有要求的，
    需要这两个应用有相同的ShareUID并且签名相同才可以。在这种情况下，它们可以互相访问对方的私有数据，比如data目录、组件信息等，
    不管它们是否跑在同一个进程中。当然如果它们跑在同一个进程中，那么除了能共享data目录、组件信息，还可以共享内存数据，
    或者说它们看起来就像是一个应用的两个部分。

6、多进程模式的运行机制
    Android为每一个应用分配一个独立的虚拟机，或者说为每一个进程都分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，
    这就导致了不同的虚拟机中访问同一个类会产生多分副本。

    所有运行在不同进程的四大组件，只要它们之间需要通过内存来共享数据，都会共享失败，这也是多进程所带来的主要影响。

7、使用多进程造成的问题
    静态成员和单例模式完成失效
    线程同步机制完全失效
    SharedPreferences的可靠性下降
    Application 会多次创建

8、跨进程通信需要了解  Serializable 接口 Parcelable接口 以及Binder
    （1）Serializable 接口
        Serializable是java所提供的一个序列化接口，它是一个空接口，为对象提供标准的序列化喝反序列化操作，只需要声明SerializableUID，
        标识就能自动实现默认的序列化过程

        Parcelable是Android 提供的新的序列化方式，



